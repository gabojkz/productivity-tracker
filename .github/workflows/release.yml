name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            platform: darwin-x86_64
            artifact: productivity-tracker.app.tar.gz
          - os: ubuntu-latest
            platform: linux-x86_64
            artifact: productivity-tracker.AppImage
          - os: windows-latest
            platform: windows-x86_64
            artifact: productivity-tracker.msi

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          # Check available webkit packages
          echo "Available webkit packages:"
          apt-cache search webkit | grep -E "(webkit2gtk|javascriptcore)" || echo "No webkit packages found"
          echo ""
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgirepository1.0-dev \
            libglib2.0-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libatk1.0-dev \
            libgdk-pixbuf2.0-dev \
            libsoup2.4-dev \
            libssl-dev \
            libgtksourceview-3.0-dev \
            pkg-config \
            build-essential \
            libasound2-dev \
            libx11-dev \
            libxrandr-dev \
            libxss-dev \
            libxtst-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxrender-dev \
            libxcomposite-dev \
            libxcursor-dev \
            libxdamage-dev \
            libxinerama-dev
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS doesn't need GTK dependencies for Tauri
          # Tauri uses native macOS APIs
          echo "macOS dependencies handled by Rust toolchain"

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows dependencies are handled by the Rust toolchain

      - name: Install dependencies
        run: npm ci

      - name: Verify pkg-config setup (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          pkg-config --list-all | grep -i gobject || echo "gobject not found in pkg-config list"
          pkg-config --exists gobject-2.0 && echo "gobject-2.0 found" || echo "gobject-2.0 not found"
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1

      - name: Verify macOS setup
        if: matrix.os == 'macos-latest'
        run: |
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Xcode version: $(xcodebuild -version | head -n 1)"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli

      - name: Build application
        run: npm run tauri build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig
          PKG_CONFIG_ALLOW_SYSTEM_CFLAGS: 1

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: src-tauri/target/release/

  create-release:
    needs: release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/*.dmg
            artifacts/*.AppImage
            artifacts/*.msi
            artifacts/*.exe
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: create-release
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Notify success
        run: |
          echo "ðŸŽ‰ Release ${{ github.ref_name }} created successfully!"
          echo "ðŸ“± Users can now update their apps automatically!" 